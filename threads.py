import asyncio
from create import bot
from aiogram.utils import exceptions
from database import localDB
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup


def get_users():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    yield from localDB.database


inline_btn_1 = InlineKeyboardButton('finanz.ru', url='https://www.finanz.ru/birzhevyye-tovary/v-realnom-vremeni')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)

inline_btn_2 = InlineKeyboardButton('investing.com', url='https://ru.investing.com/commodities/metals')
inline_kb2 = InlineKeyboardMarkup().add(inline_btn_2)

async def send_message(user_id: int, output_text: str, hint: str, disable_notification: bool = False) -> bool:
    try:
        if hint == "finanz":
            await bot.send_message(user_id, output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb1)
        elif hint == "investing":
            await bot.send_message(user_id, output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
        elif hint == "triggerFinCur":
            await bot.send_message(user_id, ("triggerFinCur: " + output_text), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb1)
        elif hint == "triggerFinMet":
            await bot.send_message(user_id, ("triggerFinMet: " + output_text), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb1)
        elif hint == "triggerFinMat":
            await bot.send_message(user_id, ("triggerFinMat: " + output_text), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb1)
        elif hint == "triggerInvCur":
            await bot.send_message(user_id, ("triggerInvCur: " + output_text), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
        elif hint == "triggerInvMet":
            await bot.send_message(user_id, ("triggerInvMet: " + output_text), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
        elif hint == "triggerInvMat":
            await bot.send_message(user_id, ("triggerInvMat: " + output_text), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
    except exceptions.BotBlocked:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except exceptions.ChatNotFound:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except exceptions.RetryAfter as e:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π. –û–∂–∏–¥–∞–Ω–∏–µ {e.timeout} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.timeout)
        return await send_message(user_id, output_text)  # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
    except exceptions.UserDeactivated:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    except exceptions.TelegramAPIError:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –æ—à–∏–±–∫–∞")
    else:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: —É—Å–ø–µ—à–Ω–æ")
        return True
    return False


async def broadcaster(text, hint) -> int:
    count = 0
    try:
        for user_id in get_users():
            if await send_message(user_id, text, hint):
                count += 1
            await asyncio.sleep(.05)  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º: 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
    finally:
        print(f"{count} —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")

    return count  # –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


async def broadcast(sleep_for, trigger):
    while True:
        await asyncio.sleep(sleep_for)
        # -------------FINANZ--------------
        curr = trigger.finanz.get_currency_price()
        met = trigger.finanz.get_metals_price()
        mat = trigger.finanz.get_materials_price()
        print("–¢–†–ò–ì–ì–ï–†–ù–ê–Ø –¶–ï–ù–ê")
        print(trigger.get_current_price())
        result = '*–ë–∏—Ä–∂–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*                           üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
        for key, value in zip(curr, curr.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(RUB)_\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
        for key, value in zip(met, met.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(USD/–¢—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)_\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
        for key, value in zip(mat, mat.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(USc/–§—É–Ω—Ç)_\n"
        await broadcaster(result, "finanz")
        # ----------------------------

        print("broadcast —Å—Ä–∞–±–æ—Ç–∞–ª")

        
async def broadcastInvesting(sleep_for, trigger):
    while True:
        await asyncio.sleep(sleep_for)
        # -------------INVESTING--------------
        curr = trigger.finanz.get_currency_price()
        met = trigger.finanz.get_metals_price()
        mat = trigger.finanz.get_materials_price()
        print("–¢–†–ò–ì–ì–ï–†–ù–ê–Ø –¶–ï–ù–ê")
        print(trigger.get_current_price())
        result = '*–ë–∏—Ä–∂–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*                           üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
        i = 0
        slash = ['RUB', 'RUB', 'USD', 'USD']
        for key, value in zip(curr, curr.values()):
            result += (" " + key + "/" + slash[i] + ": `" + str(value) + "` \n")
            i += 1
        result += "\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
        for key, value in zip(met, met.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
        for key, value in zip(mat, mat.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "\n"
        await broadcaster(result, "investing")
        # ----------------------------

        print("broadcast —Å—Ä–∞–±–æ—Ç–∞–ª")

async def check_triggers(sleep_for, trigger, triggerInv):
    while True:
        await asyncio.sleep(sleep_for)
        # -------------FINANZ--------------
        error_cur = trigger.trgger_currency()
        for err in error_cur:
            if err:
                await broadcaster(err, "triggerFinCur")
        error_met = trigger.trgger_metals()
        for err in error_met:
            if err:
                await broadcaster(err, "triggerFinMet")
        error_mat = trigger.trgger_materials()
        for err in error_mat:
            if err:
                await broadcaster(err, "triggerFinMat")
        localDB.trigger_price = trigger.get_current_price()
        # -------------Investing--------------
        error_cur = triggerInv.trgger_currency()
        for err in error_cur:
            if err:
                await broadcaster(err, "triggerInvCur")
        error_met = triggerInv.trgger_metals()
        for err in error_met:
            if err:
                await broadcaster(err, "triggerInvMet")
        error_mat = triggerInv.trgger_materials()
        for err in error_mat:
            if err:
                await broadcaster(err, "triggerInvMat")
        localDB.triggerInv_price = triggerInv.get_current_price()
        # ----------------------------

        print("check_triggers —Å—Ä–∞–±–æ—Ç–∞–ª")

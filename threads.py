import asyncio
from create import bot
from aiogram.utils import exceptions
from database import localDB
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup


def get_users():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    yield from localDB.database


inline_btn_1 = InlineKeyboardButton('finanz.ru', url='https://www.finanz.ru/birzhevyye-tovary/v-realnom-vremeni')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)

inline_btn_2 = InlineKeyboardButton('investing.com', url='https://ru.investing.com/commodities/metals')
inline_kb2 = InlineKeyboardMarkup().add(inline_btn_2)

inline_btn_3 = InlineKeyboardButton('tradingeconomics.com', url='https://tradingeconomics.com/russia/forecast')
inline_kb3 = InlineKeyboardMarkup().add(inline_btn_3)

async def send_message(user_id: int, output_text: str, hint: str, disable_notification: bool = False) -> bool:
    try:
        if hint == "finanz":
            await bot.send_message(user_id, output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb1)
        elif hint == "investing":
            await bot.send_message(user_id, output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
        elif hint == "hint":
            await bot.send_message(user_id, output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN)
        elif hint == "trading":
            await bot.send_message(user_id, output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb3)
        elif hint == "triggerFinMat":
            await bot.send_message(user_id,output_text, disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb1)
        elif hint == "triggerInvCur":
            await bot.send_message(user_id, ("‚ö†Ô∏è–°—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä! \n" + output_text+ "\n #triggerInvestingCurrency"), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
        elif hint == "triggerInvMet":
            await bot.send_message(user_id, ("‚ö†Ô∏è–°—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä! \n" + output_text+ "\n #triggerInvestingMetal"), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
        elif hint == "triggerInvMat":
            await bot.send_message(user_id, ("‚ö†Ô∏è–°—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä! \n" + output_text + "\n #triggerInvestingMaterial"), disable_notification=disable_notification, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb2)
    except exceptions.BotBlocked:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except exceptions.ChatNotFound:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except exceptions.RetryAfter as e:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π. –û–∂–∏–¥–∞–Ω–∏–µ {e.timeout} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.timeout)
        return await send_message(user_id, output_text)  # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
    except exceptions.UserDeactivated:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    except exceptions.TelegramAPIError:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: –æ—à–∏–±–∫–∞")
    else:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ [ID:{user_id}]: —É—Å–ø–µ—à–Ω–æ")
        return True
    return False


async def broadcaster(text, hint) -> int:
    count = 0
    try:
        for user_id in get_users():
            if await send_message(user_id, text, hint):
                count += 1
            await asyncio.sleep(.05)  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º: 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
    finally:
        print(f"{count} —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")

    return count  # –∫–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        
async def broadcast(sleep_for, trigger):
    counter = 0
    weeks = ["/WEEK1", "/WEEK2" ,"/WEEK3", "/WEEK4"]
    while True:
        await asyncio.sleep(sleep_for)
        # -------------FINANZ--------------
        curr = trigger.finanz.get_currency_price()
        met = trigger.finanz.get_metals_price()
        mat = trigger.finanz.get_materials_price()
        mounth = localDB.triggerFull_price_finanz
        curres = {}
        for key, value in zip(curr, curr.values()):
            curres[key + weeks[counter]] = value  
        mounth.update(curres)
        metres = {}
        for key, value in zip(met, met.values()):
            metres[key + weeks[counter]] = value  
        mounth.update(metres)
        matres = {}
        for key, value in zip(mat, mat.values()):
            matres[key + weeks[counter]] = value  
        mounth.update(matres)
        localDB.triggerFull_price_finanz = mounth
        print("-----------------------------------------DEBUG\n")
        print(mounth)
        print(counter)
        print("–¢–†–ò–ì–ì–ï–†–ù–ê–Ø –¶–ï–ù–ê")
        print(trigger.get_current_price())
        if counter < 3:
            result = '*–ë–∏—Ä–∂–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*                           üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
            for key, value in zip(curr, curr.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "üè∑ _(RUB)_\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
            for key, value in zip(met, met.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "üè∑ _(USD/–¢—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)_\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
            for key, value in zip(mat, mat.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "üè∑ _(USc/–§—É–Ω—Ç)_\n"
            await broadcaster(result, "finanz")
            counter += 1
        else:
            await broadcaster(localDB.triggerFull_price_finanz, "finanz")
            localDB.triggerFull_price_finanz = {}
            counter -= 3
            
        # ----------------------------

        print("broadcast —Å—Ä–∞–±–æ—Ç–∞–ª")

        
async def broadcastInvesting(sleep_for, trigger):
    counter = 0
    weeks = ["/WEEK1", "/WEEK2" ,"/WEEK3", "/WEEK4"]
    while True:
        await asyncio.sleep(sleep_for)
        # -------------INVESTING--------------
        curr = trigger.finanz.get_currency_price()
        met = trigger.finanz.get_metals_price()
        mat = trigger.finanz.get_materials_price()
        mounth = localDB.triggerFull_price_investing
        curres = {}
        for key, value in zip(curr, curr.values()):
            curres[key + weeks[counter]] = value  
        mounth.update(curres)
        metres = {}
        for key, value in zip(met, met.values()):
            metres[key + weeks[counter]] = value  
        mounth.update(metres)
        matres = {}
        for key, value in zip(mat, mat.values()):
            matres[key + weeks[counter]] = value  
        mounth.update(matres)
        localDB.triggerFull_price_investing = mounth
        print("–¢–†–ò–ì–ì–ï–†–ù–ê–Ø –¶–ï–ù–ê")
        print(trigger.get_current_price())
        if counter < 3:
            result = '*–ë–∏—Ä–∂–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*                           üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
            i = 0
            slash = ['RUB', 'RUB', 'USD', 'USD']
            for key, value in zip(curr, curr.values()):
                result += (" " + key + "/" + slash[i] + ": `" + str(value) + "` \n")
                i += 1
            result += "\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
            for key, value in zip(met, met.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
            for key, value in zip(mat, mat.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "\n"
            await broadcaster(result, "investing")
            counter += 1
        else:
            await broadcaster(localDB.triggerFull_price_investing, "investing")
            localDB.triggerFull_price_investing = {}
            counter -= 3
        # ----------------------------

        print("broadcast —Å—Ä–∞–±–æ—Ç–∞–ª")

async def broadcastTrade(sleep_for, trigger):
    counter = 0
    weeks = ["/WEEK1", "/WEEK2" ,"/WEEK3", "/WEEK4"]
    while True:
        await asyncio.sleep(sleep_for)
        # -------------INVESTING--------------
        curr = trigger.finanz.get_currency_price()
        met = trigger.finanz.get_metals_price()
        mat = trigger.finanz.get_materials_price()
        mounth = localDB.triggerFull_price_trading
        curres = {}
        for key, value in zip(curr, curr.values()):
            curres[key + weeks[counter]] = value  
        mounth.update(curres)
        metres = {}
        for key, value in zip(met, met.values()):
            metres[key + weeks[counter]] = value  
        mounth.update(metres)
        matres = {}
        for key, value in zip(mat, mat.values()):
            matres[key + weeks[counter]] = value  
        mounth.update(matres)
        localDB.triggerFull_price_trading = mounth
        print("–¢–†–ò–ì–ì–ï–†–ù–ê–Ø –¶–ï–ù–ê")
        print(trigger.get_current_price())
        if counter < 3:
            result = '*–ë–∏—Ä–∂–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*                           üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
            for key, value in zip(curr, curr.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "üè∑ _(RUB)_\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
            for key, value in zip(met, met.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "üè∑ _(USD/–¢—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)_\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
            for key, value in zip(mat, mat.values()):
                result += (" " + key + ": `" + str(value) + "` \n")
            result += "üè∑ _(USc/–§—É–Ω—Ç)_\n"
            await broadcaster(result, "trading")
        else:
            await broadcaster(localDB.triggerFull_price_trading, "trading")
            localDB.triggerFull_price_trading = {}
            counter -= 3
        # ----------------------------

        print("broadcast —Å—Ä–∞–±–æ—Ç–∞–ª")
        
async def check_triggers(sleep_for, trigger, triggerInv):
    while True:
        await asyncio.sleep(sleep_for)
        await broadcaster("*–ü–æ–¥—Å–∫–∞–∑–∫–∞*: –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –ø–∞–¥–∞–µ—Ç ‚Äì –º–æ–∂–Ω–æ –ø—Ä–æ—Å–∏—Ç—å —Å–∫–∏–¥–∫—É, –µ—Å–ª–∏ —Ä–∞—Å—Ç–µ—Ç ‚Äì –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–æ—Å—Ç —Ü–µ–Ω. ", "hint")
        # -------------FINANZ--------------
        localDB.trigger_price = trigger.get_current_price()
        # -------------Investing--------------
        localDB.triggerInv_price = triggerInv.get_current_price()
        # ----------------------------

        print("check_triggers —Å—Ä–∞–±–æ—Ç–∞–ª")

from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from currency.parsingFinanz import ParsingFinanz

from create import bot
from database import localDB


async def command_start(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    more_btns_text = (
        "üìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞",
        "üìà –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞"
    )
    keyboard_markup.add(*(types.KeyboardButton(text) for text in more_btns_text))

    await message.reply("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üëã\n–í—ã –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–±—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç–¥–µ–ª–∞ –ó–∞–∫—É–ø–æ–∫ –≤ –†–æ—Å—Å–∏–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ü–µ–Ω—É —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ üìâ", reply_markup=keyboard_markup)
    #localDB.database.append(message.from_user.id)
    if message.from_user.id not in localDB.database: localDB.database.append(message.from_user.id)
    await bot.send_message(message.from_user.id, '–¢–≤–æ–π ID: ' + str(message.from_user.id))


keyboard_markup_params = types.ReplyKeyboardMarkup(resize_keyboard=True)


async def start_messaging(message: types.Message):
    button_text = message.text

    if button_text == 'üìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞':
        parser_finanz = ParsingFinanz()
        curr = parser_finanz.get_currency_price()
        met = parser_finanz.get_metals_price()
        mat = parser_finanz.get_materials_price()
        result = '*–¶–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç*                        üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
        for key, value in zip(curr, curr.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(RUB)_\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
        for key, value in zip(met, met.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(USD/–¢—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)_\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
        for key, value in zip(mat, mat.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(USc/–§—É–Ω—Ç)_\n"
        await message.reply(result, parse_mode=ParseMode.MARKDOWN)
    elif button_text == 'üìà –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞':
        price = localDB.trigger_price
        priceInv = localDB.triggerInv_price
        print("–¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
        print(price)
        print(priceInv)
        result = '*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞*\n\n*FINANZ*\n'
        for key, value in zip(price, price.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "\n*INVESTING*\n"
        for key, value in zip(priceInv, priceInv.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += '\n–ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —ç—Ç–∏—Ö —Ü–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä!'
        await message.reply(result, parse_mode=ParseMode.MARKDOWN)




def register_handlers(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help', '–û–±—Ä–∞—Ç–Ω–æ'])
    dp.register_message_handler(start_messaging)

from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from currency.parsingFinanz import ParsingFinanz

from create import bot
from database import localDB


keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)


async def command_start(message: types.Message):
    more_btns_text = (
        "üìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞",
        "üìà –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞"
    )
    keyboard_markup.add(*(types.KeyboardButton(text) for text in more_btns_text))

    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã\n–¢—ã –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ–±—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ –±–∏—Ä–∂–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! \n\n–¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \nüìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –æ—Ç –∫–∞–∫–æ–π —Å—É–º–º—ã –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä, –∂–º–∏ \nüìà –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ \n\n–ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–ª–∞, –ø–∏—à–∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ !", reply_markup=keyboard_markup)
    localDB.database.append(message.from_user.id)
    await bot.send_message(message.from_user.id, '–¢–≤–æ–π ID: ' + str(message.from_user.id))


keyboard_markup_params = types.ReplyKeyboardMarkup(resize_keyboard=True)


async def start_messaging(message: types.Message):
    button_text = message.text

    if button_text == 'üìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞':
        parser_finanz = ParsingFinanz()
        curr = parser_finanz.get_currency_price()
        met = parser_finanz.get_metals_price()
        mat = parser_finanz.get_materials_price()
        result = '*–¶–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç*                        üß∑\n\nüîò *–í–∞–ª—é—Ç–∞:*\n'
        for key, value in zip(curr, curr.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(RUB)_\n\nüîò *–î—Ä–∞–≥. –ú–µ—Ç–∞–ª–ª—ã:* Ô∏è\n"
        for key, value in zip(met, met.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(USD/–¢—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)_\n\nüîò *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*Ô∏è \n"
        for key, value in zip(mat, mat.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "üè∑ _(USc/–§—É–Ω—Ç)_\n"
        await message.reply(result, reply_markup=keyboard_markup, parse_mode=ParseMode.MARKDOWN)
    elif button_text == 'üìà –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞':
        price = localDB.trigger_price
        priceInv = localDB.triggerInv_price
        print("–¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
        print(price)
        print(priceInv)
        result = '*–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞*\n\nFINANZ\n'
        for key, value in zip(price, price.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += "INVESTING\n"
         for key, value in zip(priceInv, priceInv.values()):
            result += (" " + key + ": `" + str(value) + "` \n")
        result += '\n–ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —ç—Ç–∏—Ö —Ü–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä!'
        await message.reply(result, reply_markup=keyboard_markup, parse_mode=ParseMode.MARKDOWN)
    elif button_text == '!':
        await message.reply("–û—Ç–∫—Ä—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...", reply_markup=keyboard_markup)




def register_handlers(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help', '–û–±—Ä–∞—Ç–Ω–æ'])
    dp.register_message_handler(start_messaging)
